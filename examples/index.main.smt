(set-option :print-success true )
(set-option :produce-models true )
(set-logic ALL )
(define-sort UInt () Int )
(declare-sort Bytes 0 )
(declare-fun bytes0 () Bytes )
(declare-fun bytes (Int ) Bytes )
(define-fun Bytes_toBytes ((b Bytes ) ) Bytes b )
(declare-fun bytesAppend (Bytes Bytes ) Bytes )
(declare-sort Digest 0 )
(declare-fun digest (Bytes ) Digest )
(declare-fun Digest_toBytes (Digest ) Bytes )
(declare-sort Null 0 )
(declare-fun null () Null )
(define-fun Null_toBytes ((n Null ) ) Bytes bytes0 )
(declare-fun Bool_toBytes (Bool ) Bytes )
(declare-fun UInt_toBytes (UInt ) Bytes )
(declare-sort Address 0 )
(declare-fun Address_toBytes (Address ) Bytes )
(declare-sort Token 0 )
(declare-fun Token_toBytes (Token ) Bytes )
(declare-sort Contract 0 )
(declare-fun Contract_toBytes (Contract ) Bytes )
(push 1 ) ;; {
  (declare-fun dlc_UInt_max () UInt )
  (assert (<= 0 dlc_UInt_max ) )
  (declare-fun address_Alice () Address )
  (assert true )
  (declare-fun address_Bob () Address )
  (assert true )
  (push 1 ) ;; {
    (declare-fun v78 () Address )
    (assert true )
    (declare-fun v79 () Address )
    (assert true )
    (push 1 ) ;; {
      (pop 1 ) ;; }
    (push 1 ) ;; {
      (declare-fun v51 () Address )
      (assert true )
      (assert (= v51 address_Alice ) )
      (declare-fun pv_net80 () UInt )
      (assert (<= 0 pv_net80 ) )
      (declare-fun pv_tok82 () Token )
      (assert true )
      (declare-fun pv_ks81 () (Array Token UInt ) )
      (assert (<= 0 (select pv_ks81 pv_tok82 ) ) )
      (assert (= pv_net80 0 ) )
      (declare-fun v83 () Address )
      (assert true )
      (declare-fun v84 () Address )
      (assert true )
      (declare-fun v52 () UInt )
      (assert (<= 0 v52 ) )
      (declare-fun v53 () UInt )
      (assert (<= 0 v53 ) )
      (declare-fun v23 () Bool )
      (assert true )
      (assert (= v52 0 ) )
      (assert (= v53 0 ) )
      (push 1 ) ;; {
        (assert (not (= 0 pv_net80 ) ) )
        (check-sat-using (try-for default 10 ) )
        ;; unsat
        (pop 1 ) ;; }
      (assert (= 0 pv_net80 ) )
      (declare-fun v56 () UInt )
      (assert (<= 0 v56 ) )
      (declare-fun v59 () Bool )
      (assert true )
      (assert (= v59 (<= v56 v56 ) ) )
      (push 1 ) ;; {
        (assert (not v59 ) )
        (check-sat-using (try-for default 10 ) )
        ;; unsat
        (pop 1 ) ;; }
      (assert v59 )
      (declare-fun v61 () UInt )
      (assert (<= 0 v61 ) )
      (assert (= v61 (- v56 v56 ) ) )
      (declare-fun v64 () Address )
      (assert true )
      (push 1 ) ;; {
        (pop 1 ) ;; }
      (push 1 ) ;; {
        (declare-fun v65 () Address )
        (assert true )
        (assert (= v65 address_Bob ) )
        (declare-fun pv_net85 () UInt )
        (assert (<= 0 pv_net85 ) )
        (declare-fun pv_tok87 () Token )
        (assert true )
        (declare-fun pv_ks86 () (Array Token UInt ) )
        (assert (<= 0 (select pv_ks86 pv_tok87 ) ) )
        (assert (= pv_net85 0 ) )
        (declare-fun v88 () Address )
        (assert true )
        (declare-fun v89 () Address )
        (assert true )
        (declare-fun v66 () UInt )
        (assert (<= 0 v66 ) )
        (declare-fun v67 () UInt )
        (assert (<= 0 v67 ) )
        (declare-fun v39 () Bool )
        (assert true )
        (assert (= v66 (+ v52 1 ) ) )
        (assert (= v67 (+ v53 1 ) ) )
        (push 1 ) ;; {
          (assert (not (= 0 pv_net85 ) ) )
          (check-sat-using (try-for default 10 ) )
          ;; unsat
          (pop 1 ) ;; }
        (assert (= 0 pv_net85 ) )
        (declare-fun v70 () UInt )
        (assert (<= 0 v70 ) )
        (declare-fun v71 () UInt )
        (assert (<= 0 v71 ) )
        (assert (= v71 (+ v70 v61 ) ) )
        (declare-fun v73 () Bool )
        (assert true )
        (assert (= v73 (<= v70 v71 ) ) )
        (push 1 ) ;; {
          (assert (not v73 ) )
          (check-sat-using (try-for default 10 ) )
          ;; unsat
          (pop 1 ) ;; }
        (assert v73 )
        (declare-fun v75 () UInt )
        (assert (<= 0 v75 ) )
        (assert (= v75 (- v71 v70 ) ) )
        (declare-fun v77 () Bool )
        (assert true )
        (assert (= v77 (= 0 v75 ) ) )
        (push 1 ) ;; {
          (assert (not v77 ) )
          (check-sat-using (try-for default 10 ) )
          ;; unsat
          (pop 1 ) ;; }
        (assert v77 )
        (pop 1 ) ;; }
      (pop 1 ) ;; }
    (pop 1 ) ;; }
  (push 1 ) ;; {
    (declare-fun v90 () Address )
    (assert true )
    (declare-fun v91 () Address )
    (assert true )
    (push 1 ) ;; {
      (pop 1 ) ;; }
    (push 1 ) ;; {
      (declare-fun v51 () Address )
      (assert true )
      (declare-fun pv_net92 () UInt )
      (assert (<= 0 pv_net92 ) )
      (declare-fun pv_tok94 () Token )
      (assert true )
      (declare-fun pv_ks93 () (Array Token UInt ) )
      (assert (<= 0 (select pv_ks93 pv_tok94 ) ) )
      (declare-fun v95 () Address )
      (assert true )
      (declare-fun v96 () Address )
      (assert true )
      (declare-fun v52 () UInt )
      (assert (<= 0 v52 ) )
      (declare-fun v53 () UInt )
      (assert (<= 0 v53 ) )
      (declare-fun v23 () Bool )
      (assert true )
      (assert (= v52 0 ) )
      (assert (= v53 0 ) )
      (assert (= 0 pv_net92 ) )
      (declare-fun v56 () UInt )
      (assert (<= 0 v56 ) )
      (declare-fun v59 () Bool )
      (assert true )
      (assert (= v59 (<= v56 v56 ) ) )
      (push 1 ) ;; {
        (assert (not v59 ) )
        (check-sat-using (try-for default 10 ) )
        ;; unsat
        (pop 1 ) ;; }
      (assert v59 )
      (declare-fun v61 () UInt )
      (assert (<= 0 v61 ) )
      (assert (= v61 (- v56 v56 ) ) )
      (push 1 ) ;; {
        (pop 1 ) ;; }
      (push 1 ) ;; {
        (declare-fun v65 () Address )
        (assert true )
        (declare-fun pv_net97 () UInt )
        (assert (<= 0 pv_net97 ) )
        (declare-fun pv_tok99 () Token )
        (assert true )
        (declare-fun pv_ks98 () (Array Token UInt ) )
        (assert (<= 0 (select pv_ks98 pv_tok99 ) ) )
        (declare-fun v100 () Address )
        (assert true )
        (declare-fun v101 () Address )
        (assert true )
        (declare-fun v66 () UInt )
        (assert (<= 0 v66 ) )
        (declare-fun v67 () UInt )
        (assert (<= 0 v67 ) )
        (declare-fun v39 () Bool )
        (assert true )
        (assert (= v66 (+ v52 1 ) ) )
        (assert (= v67 (+ v53 1 ) ) )
        (assert (= 0 pv_net97 ) )
        (declare-fun v70 () UInt )
        (assert (<= 0 v70 ) )
        (declare-fun v71 () UInt )
        (assert (<= 0 v71 ) )
        (assert (= v71 (+ v70 v61 ) ) )
        (declare-fun v73 () Bool )
        (assert true )
        (assert (= v73 (<= v70 v71 ) ) )
        (push 1 ) ;; {
          (assert (not v73 ) )
          (check-sat-using (try-for default 10 ) )
          ;; unsat
          (pop 1 ) ;; }
        (assert v73 )
        (declare-fun v75 () UInt )
        (assert (<= 0 v75 ) )
        (assert (= v75 (- v71 v70 ) ) )
        (declare-fun v77 () Bool )
        (assert true )
        (assert (= v77 (= 0 v75 ) ) )
        (push 1 ) ;; {
          (assert (not v77 ) )
          (check-sat-using (try-for default 10 ) )
          ;; unsat
          (pop 1 ) ;; }
        (assert v77 )
        (pop 1 ) ;; }
      (pop 1 ) ;; }
    (pop 1 ) ;; }
  (pop 1 ) ;; }
(exit )
